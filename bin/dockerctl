#! /usr/bin/env python
# vi: ft=python fileencoding=utf-8

from dockerctl.container import Container, ContainerException
import subprocess
import sys
try:
    from dockerctl.version import version
except ImportError:
    version = 'DEV'


def print_help():
    print """\
USAGE: %s COMMAND [CONTAINER ...]

A manager for docker containers.

where COMMAND is one of:
    start       start container(s)
    stop        stop container(s)
    restart     restart container(s)
    status      show status of container(s)
    help        show this help message

This is dockerctl version %s. See https://github.com/fqxp/dockerfiles for source code.
    """ % (sys.argv[0], version)

if __name__ == '__main__':
    cmd = sys.argv[1] if len(sys.argv) > 1 else ''

    if cmd == 'help':
        print_help()
        sys.exit(0)
    elif cmd not in ('start', 'stop', 'restart', 'status'):
        print 'Unknown command ’%s’' % cmd
        print
        print_help()
        sys.exit(1)

    container_names = sys.argv[2:]
    if len(container_names) == 0:
        container_names = Container.available()

    for container_name in container_names:
        c = Container(container_name)
        try:
            if cmd == 'start':
                print 'Starting %s ...' % container_name,
                c.start()
                print 'done'
            elif cmd == 'stop':
                print 'Stopping %s ...' % container_name,
                c.stop()
                print 'done'
            elif cmd == 'restart':
                print 'Restarting %s ...' % container_name,
                c.restart()
                print 'done'
            elif cmd == 'status':
                c.status()
        except ContainerException as e:
            print 'ERROR: %s' % e.message
        except subprocess.CalledProcessError as e:
            print 'Subprocess %s failed with %d' % (e.cmd, e.returncode)
            sys.exit(2)
