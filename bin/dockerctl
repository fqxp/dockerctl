#! /usr/bin/env python
# vi: ft=python fileencoding=utf-8

from dockerctl.container import Container, ContainerException
from dockerctl.container_config import ContainerConfig
from dockerctl.docker_py_client import DockerPyClient
from dockerctl.docker_cmdline_client import DockerCmdlineClient
import argparse
import logging
import subprocess
import sys
try:
    from dockerctl.version import version
except ImportError:
    version = 'DEV'

logging.basicConfig(format='[%(levelname)s] %(message)s')
logger = logging.getLogger()
logger.setLevel(logging.INFO)

cmd_help = '''
    start       start container(s)
    stop        stop container(s)
    restart     restart container(s)
    status      show status of container(s)
    shell       start a shell in the container
    help        show this help message'''

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Control configured Docker containers.',
        epilog='This is dockerctl version %s. See https://github.com/fqxp/dockerfiles for more info.' % version)
    parser.add_argument('-d', '--debug', action='store_true', help='Enable debugging')
    parser.add_argument('-C', '--use-cmdline-client', action='store_true', help='User docker command instead of API directly')
    parser.add_argument('-c', '--container-command', nargs=1, help='command to run in container')
    parser.add_argument('command', nargs=1, help=cmd_help, choices=['start', 'stop', 'restart', 'status', 'run'])
    parser.add_argument('container', nargs='?', help='dockerctl container name')

    args = parser.parse_args()

    if args.debug:
        logger.setLevel(logging.DEBUG)

    docker_client = DockerCmdlineClient() if args.use_cmdline_client else DockerPyClient()
    container = None
    if args.container:
        config = ContainerConfig(args.container)
        container = Container(config, docker_client)

    cmd = args.command[0]

    try:
        if cmd == 'start':
            logger.info('Starting %s' % config.name)
            container_id = container.start()
        elif cmd == 'stop':
            logger.info('Stopping %s' % config.name)
            container.stop()
        elif cmd == 'restart':
            logger.info('Stopping %s ...' % config.name)
            container.stop()
            logger.info('Starting %s ...' % config.name)
            container_id = container.start()
        elif cmd == 'run':
            container_cmd = args.container_command or '/bin/bash'
            logger.info('Starting %s with command %s' % (config.name, container_cmd))
            container.start(container_cmd, interactive=True)
        elif cmd == 'status':
            configs = map(lambda name: ContainerConfig(name), sys.argv[2:]) or ContainerConfig.available()
            for config in configs:
                container = Container(config, docker_client)
                container.status()

    except ContainerException as e:
        logger.error(e.message)
        sys.exit(1)
    except subprocess.CalledProcessError as e:
        logger.error('Subprocess %s failed with %d' % (e.cmd, e.returncode))
        sys.exit(2)
