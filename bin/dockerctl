#! /usr/bin/env python
# vi: ft=python fileencoding=utf-8

from dockerctl.container import Container, ContainerException
from dockerctl.docker_py_client import DockerPyClient
import subprocess
import sys
try:
    from dockerctl.version import version
except ImportError:
    version = 'DEV'


def print_help():
    print """\
USAGE: %s COMMAND [CONTAINER ...]

A manager for docker containers.

where COMMAND is one of:
    start       start container(s)
    stop        stop container(s)
    restart     restart container(s)
    status      show status of container(s)
    shell       start a shell in the container
    help        show this help message

This is dockerctl version %s. See https://github.com/fqxp/dockerfiles for source code.
    """ % (sys.argv[0], version)

if __name__ == '__main__':
    cmd = sys.argv[1] if len(sys.argv) > 1 else ''

    if cmd == 'help':
        print_help()
        sys.exit(0)
    elif cmd not in ('start', 'stop', 'restart', 'run', 'status'):
        print 'Unknown command ’%s’' % cmd
        print
        print_help()
        sys.exit(1)

    docker_client = DockerPyClient()

    try:
        if cmd == 'start':
            for container_name in sys.argv[2:] or Container.available():
                print 'Starting %s ...' % container_name,
                c = Container(container_name, docker_client)
                container_id = c.start()
                print 'done [%s]' % container_id
        elif cmd == 'stop':
            for container_name in sys.argv[2:] or Container.available():
                c = Container(container_name, docker_client)
                print 'Stopping %s ...' % container_name,
                c.stop()
                print 'done'
        elif cmd == 'restart':
            for container_name in sys.argv[2:] or Container.available():
                c = Container(container_name, docker_client)
                print 'Stopping %s ...' % container_name,
                c.stop()
                print 'done'
                print 'Starting %s ...' % container_name,
                container_id = c.start()
                print 'done'
        elif cmd == 'run':
            container_name = sys.argv[2]
            cmd = ' '.join(sys.argv[3:]) or '/bin/bash'
            c = Container(container_name, docker_client)
            c.start(cmd, interactive=True)
        elif cmd == 'status':
            for container_name in sys.argv[2:] or Container.available():
                c = Container(container_name, docker_client)
                c.status()
    except ContainerException as e:
        print 'ERROR: %s' % e.message
    except subprocess.CalledProcessError as e:
        print 'Subprocess %s failed with %d' % (e.cmd, e.returncode)
        sys.exit(2)
